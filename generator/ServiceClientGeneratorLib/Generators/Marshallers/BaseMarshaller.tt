<#@ template language="C#" inherits="Generators.BaseGenerator" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>

<#+
    // Adds the neccesary namespaces for the marshaller
protected void AddCommonUsingStatements()
    {
#>
using System;
using System.Collections.Generic;
using System.Globalization;
using System.IO;
using System.Text;
using System.Xml.Serialization;

using <#=this.Config.Namespace #>.Model;
using Amazon.Runtime;
using Amazon.Runtime.Internal;
using Amazon.Runtime.Internal.Transform;
using Amazon.Runtime.Internal.Util;
<#+
    }
#>

<#+
    // Generates code to add members to the header of the request
    // If it's a custom marshaller then it calls the custom marshaller first
	protected void ProcessHeaderMembers(string variableName, IEnumerable<Member> members)
	{
		foreach(var member in members)
		{
#>		
			if(<#=variableName#>.IsSet<#=member.PropertyName#>())
<#+
            if (member.CustomMarshallerTransformation != null)
            {
#>
				request.Headers["<#=member.MarshallLocationName#>"] = <#=member.CustomMarshallerTransformation#>(<#=variableName#>.<#=member.PropertyName#>);
<#+        
            }
            else if (member.IsJsonValue)
            {
#>
				request.Headers["<#=member.MarshallLocationName#>"] = Convert.ToBase64String(Encoding.UTF8.GetBytes(<#=variableName#>.<#=member.PropertyName#>));
<#+
            }
            else
            {
#>
				request.Headers["<#=member.MarshallLocationName#>"] = <#=variableName#>.<#=member.PropertyName#>;
<#+			
		    }
        }
	}

    // Generates code to add the operation's requestURIMembers to the uriResourcePath
	protected void ProcessUriMembers(string variableName, Operation operation)
	{
		foreach(var member in operation.RequestUriMembers)
		{
            bool isGreedy = false;
            var marshallLocationName = operation.GetUriResourcePathTarget(member, out isGreedy);

            if (member.model.Customizations.SkipUriPropertyValidations.Contains(member.PropertyName))
            {
				if(isGreedy)
				{
#>
			uriResourcePath = uriResourcePath.Replace("<#=marshallLocationName#>", <#=variableName#>.IsSet<#=member.PropertyName#>() ? StringUtils.From<#=member.GetPrimitiveType()#>(<#=variableName#>.<#=member.PropertyName#>.TrimStart('/')) : string.Empty);
<#+
				}
				else
				{
#>
			uriResourcePath = uriResourcePath.Replace("<#=marshallLocationName#>", <#=variableName#>.IsSet<#=member.PropertyName#>() ? StringUtils.From<#=member.GetPrimitiveType()#>(<#=variableName#>.<#=member.PropertyName#>) : string.Empty);
<#+
				}

            }
            else
            {
#>
            if (!<#=variableName#>.IsSet<#=member.PropertyName#>())
                throw new <#=this.Config.BaseException#>("Request object does not have required field <#=member.PropertyName#> set");
<#+
			if(isGreedy)
				{
#>
			uriResourcePath = uriResourcePath.Replace("<#=marshallLocationName#>", StringUtils.From<#=member.GetPrimitiveType()#>(<#=variableName#>.<#=member.PropertyName#>.TrimStart('/')));
<#+
				}
				else
				{
#>
			uriResourcePath = uriResourcePath.Replace("<#=marshallLocationName#>", StringUtils.From<#=member.GetPrimitiveType()#>(<#=variableName#>.<#=member.PropertyName#>));
<#+
				}
            }
		}
	}

	protected void ProcessRequestUri(Operation operation)
	{
#>
			string uriResourcePath = "<#=operation.RequestUri #>";
<#+
		foreach(var staticQueryParam in operation.StaticQueryParameters)
		{
			if(staticQueryParam.Value != null)
			{
#>
			request.AddSubResource("<#=staticQueryParam.Key#>", "<#=staticQueryParam.Value#>");
<#+			
			}
			else
			{
#>
			request.AddSubResource("<#=staticQueryParam.Key#>");
<#+						
			}
		}
	}

    // Generates code to add any operation query members to the query string for the request
    // If the marshaller is customized, it marshalls the value before changing it to a string
	protected void ProcessQueryStringMembers(string variableName, Operation operation)
	{
		if(operation.RequestHasQueryStringMembers)		
		{
			foreach(var member in operation.RequestQueryStringMembers)
			{
#>			
			if (<#=variableName#>.IsSet<#=member.PropertyName#>())
<#+
                if (member.CustomMarshallerTransformation != null)
                {
#>
				request.Parameters.Add("<#=member.MarshallLocationName#>", <#=member.CustomMarshallerTransformation#>(<#=variableName#>.<#=member.PropertyName#>));
<#+        
                }
                else if (member.IsMap)
                {
#>
            {
                foreach(var kvp in <#=variableName#>.<#=member.PropertyName#>)
                {
                    request.Parameters.Add(kvp.Key, kvp.Value);
                }
            }
<#+
                }
                else if (member.IsList)
                {
#>
                request.ParameterCollection.Add("<#=member.MarshallLocationName#>", <#=variableName#>.<#=member.PropertyName#>);
<#+
                }
                else
                {
#>
				request.Parameters.Add("<#=member.MarshallLocationName#>", StringUtils.From<#=member.GetPrimitiveType()#>(<#=variableName#>.<#=member.PropertyName#>));
<#+			
				}
			}
		}
	}
#>